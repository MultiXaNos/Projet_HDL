// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/27/2021 19:01:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CptNbitsNatTL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CptNbitsNatTL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg Sens;
reg nReset;
reg nSet;
// wires                                               
wire [0:3] Cpt;

// assign statements (if any)                          
CptNbitsNatTL i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.Cpt(Cpt),
	.Sens(Sens),
	.nReset(nReset),
	.nSet(nSet)
);
initial 
begin 
#100000000 $finish;
end 

// Clk
always
begin
	Clk = 1'b0;
	Clk = #1250000 1'b1;
	#1250000;
end 

// Sens
initial
begin
	Sens = 1'b1;
	Sens = #47360000 1'b0;
end 

// nReset
initial
begin
	nReset = 1'b1;
	nReset = #76160000 1'b0;
	nReset = #14080000 1'b1;
end 

// nSet
initial
begin
	nSet = 1'b1;
	nSet = #1280000 1'b0;
	nSet = #7680000 1'b1;
end 
endmodule

